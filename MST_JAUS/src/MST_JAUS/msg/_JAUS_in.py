"""autogenerated by genmsg_py from JAUS_in.msg. Do not edit."""
import roslib.message
import struct


class JAUS_in(roslib.message.Message):
  _md5sum = "9b9f2016656ffff9a61cd6f939a75b4f"
  _type = "MST_JAUS/JAUS_in"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64     altitude
float64     heading
float64     speed
float64     angular_rate
float64     gps_time
bool        position_valid
bool        heading_valid
bool        speed_valid
bool        angular_rate_valid
float64     position_accuracy

"""
  __slots__ = ['altitude','heading','speed','angular_rate','gps_time','position_valid','heading_valid','speed_valid','angular_rate_valid','position_accuracy']
  _slot_types = ['float64','float64','float64','float64','float64','bool','bool','bool','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       altitude,heading,speed,angular_rate,gps_time,position_valid,heading_valid,speed_valid,angular_rate_valid,position_accuracy
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(JAUS_in, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.altitude is None:
        self.altitude = 0.
      if self.heading is None:
        self.heading = 0.
      if self.speed is None:
        self.speed = 0.
      if self.angular_rate is None:
        self.angular_rate = 0.
      if self.gps_time is None:
        self.gps_time = 0.
      if self.position_valid is None:
        self.position_valid = False
      if self.heading_valid is None:
        self.heading_valid = False
      if self.speed_valid is None:
        self.speed_valid = False
      if self.angular_rate_valid is None:
        self.angular_rate_valid = False
      if self.position_accuracy is None:
        self.position_accuracy = 0.
    else:
      self.altitude = 0.
      self.heading = 0.
      self.speed = 0.
      self.angular_rate = 0.
      self.gps_time = 0.
      self.position_valid = False
      self.heading_valid = False
      self.speed_valid = False
      self.angular_rate_valid = False
      self.position_accuracy = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_5d4Bd.pack(_x.altitude, _x.heading, _x.speed, _x.angular_rate, _x.gps_time, _x.position_valid, _x.heading_valid, _x.speed_valid, _x.angular_rate_valid, _x.position_accuracy))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.altitude, _x.heading, _x.speed, _x.angular_rate, _x.gps_time, _x.position_valid, _x.heading_valid, _x.speed_valid, _x.angular_rate_valid, _x.position_accuracy,) = _struct_5d4Bd.unpack(str[start:end])
      self.position_valid = bool(self.position_valid)
      self.heading_valid = bool(self.heading_valid)
      self.speed_valid = bool(self.speed_valid)
      self.angular_rate_valid = bool(self.angular_rate_valid)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_5d4Bd.pack(_x.altitude, _x.heading, _x.speed, _x.angular_rate, _x.gps_time, _x.position_valid, _x.heading_valid, _x.speed_valid, _x.angular_rate_valid, _x.position_accuracy))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.altitude, _x.heading, _x.speed, _x.angular_rate, _x.gps_time, _x.position_valid, _x.heading_valid, _x.speed_valid, _x.angular_rate_valid, _x.position_accuracy,) = _struct_5d4Bd.unpack(str[start:end])
      self.position_valid = bool(self.position_valid)
      self.heading_valid = bool(self.heading_valid)
      self.speed_valid = bool(self.speed_valid)
      self.angular_rate_valid = bool(self.angular_rate_valid)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_5d4Bd = struct.Struct("<5d4Bd")
