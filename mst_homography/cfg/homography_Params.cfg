#! /usr/bin/env python
# Forearm camera configuration

PACKAGE='mst_homography'
import roslib; roslib.load_manifest(PACKAGE)

from math import pi

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()
#       Name                    Type      Reconfiguration level             Description                                        Default    Min   Max
gen.add("frame_id",             str_t,    SensorLevels.RECONFIGURE_STOP,    "The base footprint of the robot"                  ,"/base_footprint")
gen.add("use_trans",          bool_t,   SensorLevels.RECONFIGURE_STOP,    "option to use tf to find angle",            False)
gen.add("theta_x",        double_t, SensorLevels.RECONFIGURE_STOP,    "camera rotation aplied to perspective.",          0,       -0.003,  0.003)
gen.add("theta_y",        double_t, SensorLevels.RECONFIGURE_STOP,    "camera rotation aplied to perspective.",          0,       -0.01,  0.01)
gen.add("theta_z",        double_t, SensorLevels.RECONFIGURE_STOP,    "camera rotation aplied to perspective.",          0,       -pi,  pi)
gen.add("center_x",        double_t, SensorLevels.RECONFIGURE_STOP,    "center rotation is aplied on.",          0,       0,  360)
gen.add("center_y",        double_t, SensorLevels.RECONFIGURE_STOP,    "center rotation is aplied on.",          0,       0,  480)
gen.add("scale",        int_t, SensorLevels.RECONFIGURE_STOP,    "scale applied to the transform",
 0,0,10)

gen.add("laser_frame",          str_t, SensorLevels.RECONFIGURE_STOP,       "name of the laser frame",      "bob")
gen.add("laser_angle",        double_t,    SensorLevels.RECONFIGURE_STOP,    "angle through wich the scan searches in rad",      pi,       0,    pi)
gen.add("laser_scans",        int_t,    SensorLevels.RECONFIGURE_STOP,    "number of scans to preform",      180,       0,    360)
gen.add("laser_range_min",    double_t,    SensorLevels.RECONFIGURE_STOP,    "The search radius of the laser in m.",      .5,       0,    30)
gen.add("laser_range_max",    double_t,    SensorLevels.RECONFIGURE_STOP,    "The search radius of the laser in m.",      10,       0,    30)
gen.add("laser_res",           int_t,    SensorLevels.RECONFIGURE_STOP,    "The search  degrees of laser",    180,       1,    360)
gen.add("laser_time_increment",    double_t,    SensorLevels.RECONFIGURE_STOP,    "the increment time increment of the laser in sec",      0,       0,    30)
gen.add("laser_scan_time",    double_t,    SensorLevels.RECONFIGURE_STOP,    "the scan time increment of the laser in sec",      0,       0,    30)
gen.add("window_size",           int_t,    SensorLevels.RECONFIGURE_STOP,    "The number of pixels to average for the threshold",    8,       1,    50)
gen.add("laser_threshold",    double_t,    SensorLevels.RECONFIGURE_STOP,    "the threshold to qulify as obsticale",      200,       0,    500)

gen.add("pixels_per_meter",    double_t,    SensorLevels.RECONFIGURE_STOP,    "number of pixels per meter",      20,       .0001,    300)
gen.add("calibration_height",    double_t,    SensorLevels.RECONFIGURE_STOP,    "height of the calibration square in meters",      1,       .0001,    300)
gen.add("calibration_width",    double_t,    SensorLevels.RECONFIGURE_STOP,    "width of the calibration square in meters",      1,       .0001,    300)
gen.add("calibration_x",    double_t,    SensorLevels.RECONFIGURE_STOP,    "distance to botom center  in meters",      1,       -5,    5)
gen.add("calibration_y",    double_t,    SensorLevels.RECONFIGURE_STOP,    "distance to bottom center in meters",      1,          0,    5)


gen.add("robot_x",              int_t,    SensorLevels.RECONFIGURE_STOP,    "The height of the robot mask."          ,         200,       0,    400)
gen.add("robot_y",              int_t,    SensorLevels.RECONFIGURE_STOP,    "The width of the robot mask."           ,         100,       0,    400)



exit(gen.generate(PACKAGE, "dynamic_reconfigure_node", "homography_Params"))

