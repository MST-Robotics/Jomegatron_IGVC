"""autogenerated by genmsg_py from ImageFilter.msg. Do not edit."""
import roslib.message
import struct

import mst_common.msg

class ImageFilter(roslib.message.Message):
  _md5sum = "fa622389d14d78c43b4f70337cbd1806"
  _type = "mst_common/ImageFilter"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string      type
Filter[3]   filter

================================================================================
MSG: mst_common/Filter
uint8[256]  gain

"""
  __slots__ = ['type','filter']
  _slot_types = ['string','mst_common/Filter[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       type,filter
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ImageFilter, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.filter is None:
        self.filter = [mst_common.msg.Filter(),mst_common.msg.Filter(),mst_common.msg.Filter()]
    else:
      self.type = ''
      self.filter = [mst_common.msg.Filter(),mst_common.msg.Filter(),mst_common.msg.Filter()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      for val1 in self.filter:
        _x = val1.gain
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_struct_256B.pack(*_x))
        else:
          buff.write(_struct_256s.pack(_x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.type = str[start:end]
      self.filter = []
      for i in range(0, 3):
        val1 = mst_common.msg.Filter()
        start = end
        end += 256
        val1.gain = str[start:end]
        self.filter.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      for val1 in self.filter:
        _x = val1.gain
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_struct_256B.pack(*_x))
        else:
          buff.write(_struct_256s.pack(_x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.type = str[start:end]
      self.filter = []
      for i in range(0, 3):
        val1 = mst_common.msg.Filter()
        start = end
        end += 256
        val1.gain = str[start:end]
        self.filter.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_256s = struct.Struct("<256s")
_struct_256B = struct.Struct("<256B")
