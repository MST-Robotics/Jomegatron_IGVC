/* Auto-generated by genmsg_cpp for file /home/robot/Code/Jomegatron_IGVC/joe_controller_pkg/srv/GetJointProperties.srv */
#ifndef JOE_CONTROLLER_PKG_SERVICE_GETJOINTPROPERTIES_H
#define JOE_CONTROLLER_PKG_SERVICE_GETJOINTPROPERTIES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace joe_controller_pkg
{
template <class ContainerAllocator>
struct GetJointPropertiesRequest_ {
  typedef GetJointPropertiesRequest_<ContainerAllocator> Type;

  GetJointPropertiesRequest_()
  : joint_name()
  {
  }

  GetJointPropertiesRequest_(const ContainerAllocator& _alloc)
  : joint_name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  joint_name;


private:
  static const char* __s_getDataType_() { return "joe_controller_pkg/GetJointPropertiesRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0be1351618e1dc030eb7959d9a4902de"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "7b30be900f50aa21efec4a0ec92d91c9"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string joint_name\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, joint_name);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, joint_name);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(joint_name);
    return size;
  }

  typedef boost::shared_ptr< ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetJointPropertiesRequest
typedef  ::joe_controller_pkg::GetJointPropertiesRequest_<std::allocator<void> > GetJointPropertiesRequest;

typedef boost::shared_ptr< ::joe_controller_pkg::GetJointPropertiesRequest> GetJointPropertiesRequestPtr;
typedef boost::shared_ptr< ::joe_controller_pkg::GetJointPropertiesRequest const> GetJointPropertiesRequestConstPtr;


template <class ContainerAllocator>
struct GetJointPropertiesResponse_ {
  typedef GetJointPropertiesResponse_<ContainerAllocator> Type;

  GetJointPropertiesResponse_()
  : type(0)
  , damping()
  , position()
  , rate()
  , success(false)
  , status_message()
  {
  }

  GetJointPropertiesResponse_(const ContainerAllocator& _alloc)
  : type(0)
  , damping(_alloc)
  , position(_alloc)
  , rate(_alloc)
  , success(false)
  , status_message(_alloc)
  {
  }

  typedef uint8_t _type_type;
  uint8_t type;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _damping_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  damping;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  position;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rate_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  rate;

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status_message;

  enum { REVOLUTE = 0 };
  enum { CONTINUOUS = 1 };
  enum { PRISMATIC = 2 };
  enum { FIXED = 3 };
  enum { BALL = 4 };
  enum { UNIVERSAL = 5 };

  ROS_DEPRECATED uint32_t get_damping_size() const { return (uint32_t)damping.size(); }
  ROS_DEPRECATED void set_damping_size(uint32_t size) { damping.resize((size_t)size); }
  ROS_DEPRECATED void get_damping_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->damping; }
  ROS_DEPRECATED void set_damping_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->damping = vec; }
  ROS_DEPRECATED uint32_t get_position_size() const { return (uint32_t)position.size(); }
  ROS_DEPRECATED void set_position_size(uint32_t size) { position.resize((size_t)size); }
  ROS_DEPRECATED void get_position_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->position; }
  ROS_DEPRECATED void set_position_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->position = vec; }
  ROS_DEPRECATED uint32_t get_rate_size() const { return (uint32_t)rate.size(); }
  ROS_DEPRECATED void set_rate_size(uint32_t size) { rate.resize((size_t)size); }
  ROS_DEPRECATED void get_rate_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->rate; }
  ROS_DEPRECATED void set_rate_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->rate = vec; }
private:
  static const char* __s_getDataType_() { return "joe_controller_pkg/GetJointPropertiesResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cd7b30a39faa372283dc94c5f6457f82"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "7b30be900f50aa21efec4a0ec92d91c9"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
uint8 type\n\
uint8 REVOLUTE    = 0\n\
uint8 CONTINUOUS  = 1\n\
uint8 PRISMATIC   = 2\n\
uint8 FIXED       = 3\n\
uint8 BALL        = 4\n\
uint8 UNIVERSAL   = 5\n\
\n\
float64[] damping\n\
\n\
float64[] position\n\
float64[] rate\n\
\n\
bool success\n\
string status_message\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, type);
    ros::serialization::serialize(stream, damping);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, rate);
    ros::serialization::serialize(stream, success);
    ros::serialization::serialize(stream, status_message);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, type);
    ros::serialization::deserialize(stream, damping);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, rate);
    ros::serialization::deserialize(stream, success);
    ros::serialization::deserialize(stream, status_message);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(type);
    size += ros::serialization::serializationLength(damping);
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(rate);
    size += ros::serialization::serializationLength(success);
    size += ros::serialization::serializationLength(status_message);
    return size;
  }

  typedef boost::shared_ptr< ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetJointPropertiesResponse
typedef  ::joe_controller_pkg::GetJointPropertiesResponse_<std::allocator<void> > GetJointPropertiesResponse;

typedef boost::shared_ptr< ::joe_controller_pkg::GetJointPropertiesResponse> GetJointPropertiesResponsePtr;
typedef boost::shared_ptr< ::joe_controller_pkg::GetJointPropertiesResponse const> GetJointPropertiesResponseConstPtr;

struct GetJointProperties
{

typedef GetJointPropertiesRequest Request;
typedef GetJointPropertiesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetJointProperties
} // namespace joe_controller_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0be1351618e1dc030eb7959d9a4902de";
  }

  static const char* value(const  ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0be1351618e1dc03ULL;
  static const uint64_t static_value2 = 0x0eb7959d9a4902deULL;
};

template<class ContainerAllocator>
struct DataType< ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/GetJointPropertiesRequest";
  }

  static const char* value(const  ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string joint_name\n\
\n\
";
  }

  static const char* value(const  ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cd7b30a39faa372283dc94c5f6457f82";
  }

  static const char* value(const  ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcd7b30a39faa3722ULL;
  static const uint64_t static_value2 = 0x83dc94c5f6457f82ULL;
};

template<class ContainerAllocator>
struct DataType< ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/GetJointPropertiesResponse";
  }

  static const char* value(const  ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint8 type\n\
uint8 REVOLUTE    = 0\n\
uint8 CONTINUOUS  = 1\n\
uint8 PRISMATIC   = 2\n\
uint8 FIXED       = 3\n\
uint8 BALL        = 4\n\
uint8 UNIVERSAL   = 5\n\
\n\
float64[] damping\n\
\n\
float64[] position\n\
float64[] rate\n\
\n\
bool success\n\
string status_message\n\
\n\
\n\
";
  }

  static const char* value(const  ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetJointPropertiesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.damping);
    stream.next(m.position);
    stream.next(m.rate);
    stream.next(m.success);
    stream.next(m.status_message);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetJointPropertiesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<joe_controller_pkg::GetJointProperties> {
  static const char* value() 
  {
    return "7b30be900f50aa21efec4a0ec92d91c9";
  }

  static const char* value(const joe_controller_pkg::GetJointProperties&) { return value(); } 
};

template<>
struct DataType<joe_controller_pkg::GetJointProperties> {
  static const char* value() 
  {
    return "joe_controller_pkg/GetJointProperties";
  }

  static const char* value(const joe_controller_pkg::GetJointProperties&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7b30be900f50aa21efec4a0ec92d91c9";
  }

  static const char* value(const joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/GetJointProperties";
  }

  static const char* value(const joe_controller_pkg::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7b30be900f50aa21efec4a0ec92d91c9";
  }

  static const char* value(const joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/GetJointProperties";
  }

  static const char* value(const joe_controller_pkg::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // JOE_CONTROLLER_PKG_SERVICE_GETJOINTPROPERTIES_H

