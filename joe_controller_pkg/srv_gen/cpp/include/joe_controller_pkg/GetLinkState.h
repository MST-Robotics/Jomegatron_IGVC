/* Auto-generated by genmsg_cpp for file /home/sean/ros_workspace/joe_controller_pkg/srv/GetLinkState.srv */
#ifndef JOE_CONTROLLER_PKG_SERVICE_GETLINKSTATE_H
#define JOE_CONTROLLER_PKG_SERVICE_GETLINKSTATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "gazebo/LinkState.h"

namespace joe_controller_pkg
{
template <class ContainerAllocator>
struct GetLinkStateRequest_ : public ros::Message
{
  typedef GetLinkStateRequest_<ContainerAllocator> Type;

  GetLinkStateRequest_()
  : link_name()
  , reference_frame()
  {
  }

  GetLinkStateRequest_(const ContainerAllocator& _alloc)
  : link_name(_alloc)
  , reference_frame(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _link_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  link_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reference_frame_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reference_frame;


private:
  static const char* __s_getDataType_() { return "joe_controller_pkg/GetLinkStateRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "7551675c30aaa71f7c288d4864552001"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "09d6c98cce97b35f7ab9bd70300657ab"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string link_name\n\
string reference_frame\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, link_name);
    ros::serialization::serialize(stream, reference_frame);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, link_name);
    ros::serialization::deserialize(stream, reference_frame);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(link_name);
    size += ros::serialization::serializationLength(reference_frame);
    return size;
  }

  typedef boost::shared_ptr< ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetLinkStateRequest
typedef  ::joe_controller_pkg::GetLinkStateRequest_<std::allocator<void> > GetLinkStateRequest;

typedef boost::shared_ptr< ::joe_controller_pkg::GetLinkStateRequest> GetLinkStateRequestPtr;
typedef boost::shared_ptr< ::joe_controller_pkg::GetLinkStateRequest const> GetLinkStateRequestConstPtr;


template <class ContainerAllocator>
struct GetLinkStateResponse_ : public ros::Message
{
  typedef GetLinkStateResponse_<ContainerAllocator> Type;

  GetLinkStateResponse_()
  : link_state()
  , success(false)
  , status_message()
  {
  }

  GetLinkStateResponse_(const ContainerAllocator& _alloc)
  : link_state(_alloc)
  , success(false)
  , status_message(_alloc)
  {
  }

  typedef  ::gazebo::LinkState_<ContainerAllocator>  _link_state_type;
   ::gazebo::LinkState_<ContainerAllocator>  link_state;

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status_message;


private:
  static const char* __s_getDataType_() { return "joe_controller_pkg/GetLinkStateResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8ba55ad34f9c072e75c0de57b089753b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "09d6c98cce97b35f7ab9bd70300657ab"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "gazebo/LinkState link_state\n\
bool success\n\
string status_message\n\
\n\
\n\
================================================================================\n\
MSG: gazebo/LinkState\n\
# @todo: FIXME: sets pose and twist of a link.  All children link poses/twists of the URDF tree are not updated accordingly, but should be.\n\
string link_name            # link name\n\
geometry_msgs/Pose pose     # desired pose in reference frame\n\
geometry_msgs/Twist twist   # desired twist in reference frame\n\
string reference_frame      # set pose/twist relative to the frame of this link/body\n\
                            # leave empty or \"world\" or \"map\" defaults to world-frame\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, link_state);
    ros::serialization::serialize(stream, success);
    ros::serialization::serialize(stream, status_message);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, link_state);
    ros::serialization::deserialize(stream, success);
    ros::serialization::deserialize(stream, status_message);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(link_state);
    size += ros::serialization::serializationLength(success);
    size += ros::serialization::serializationLength(status_message);
    return size;
  }

  typedef boost::shared_ptr< ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetLinkStateResponse
typedef  ::joe_controller_pkg::GetLinkStateResponse_<std::allocator<void> > GetLinkStateResponse;

typedef boost::shared_ptr< ::joe_controller_pkg::GetLinkStateResponse> GetLinkStateResponsePtr;
typedef boost::shared_ptr< ::joe_controller_pkg::GetLinkStateResponse const> GetLinkStateResponseConstPtr;

struct GetLinkState
{

typedef GetLinkStateRequest Request;
typedef GetLinkStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetLinkState
} // namespace joe_controller_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7551675c30aaa71f7c288d4864552001";
  }

  static const char* value(const  ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7551675c30aaa71fULL;
  static const uint64_t static_value2 = 0x7c288d4864552001ULL;
};

template<class ContainerAllocator>
struct DataType< ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/GetLinkStateRequest";
  }

  static const char* value(const  ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string link_name\n\
string reference_frame\n\
\n\
\n\
";
  }

  static const char* value(const  ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8ba55ad34f9c072e75c0de57b089753b";
  }

  static const char* value(const  ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8ba55ad34f9c072eULL;
  static const uint64_t static_value2 = 0x75c0de57b089753bULL;
};

template<class ContainerAllocator>
struct DataType< ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/GetLinkStateResponse";
  }

  static const char* value(const  ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gazebo/LinkState link_state\n\
bool success\n\
string status_message\n\
\n\
\n\
================================================================================\n\
MSG: gazebo/LinkState\n\
# @todo: FIXME: sets pose and twist of a link.  All children link poses/twists of the URDF tree are not updated accordingly, but should be.\n\
string link_name            # link name\n\
geometry_msgs/Pose pose     # desired pose in reference frame\n\
geometry_msgs/Twist twist   # desired twist in reference frame\n\
string reference_frame      # set pose/twist relative to the frame of this link/body\n\
                            # leave empty or \"world\" or \"map\" defaults to world-frame\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.link_name);
    stream.next(m.reference_frame);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetLinkStateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.link_state);
    stream.next(m.success);
    stream.next(m.status_message);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetLinkStateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<joe_controller_pkg::GetLinkState> {
  static const char* value() 
  {
    return "09d6c98cce97b35f7ab9bd70300657ab";
  }

  static const char* value(const joe_controller_pkg::GetLinkState&) { return value(); } 
};

template<>
struct DataType<joe_controller_pkg::GetLinkState> {
  static const char* value() 
  {
    return "joe_controller_pkg/GetLinkState";
  }

  static const char* value(const joe_controller_pkg::GetLinkState&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09d6c98cce97b35f7ab9bd70300657ab";
  }

  static const char* value(const joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/GetLinkState";
  }

  static const char* value(const joe_controller_pkg::GetLinkStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "09d6c98cce97b35f7ab9bd70300657ab";
  }

  static const char* value(const joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/GetLinkState";
  }

  static const char* value(const joe_controller_pkg::GetLinkStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // JOE_CONTROLLER_PKG_SERVICE_GETLINKSTATE_H

