/* Auto-generated by genmsg_cpp for file /home/sean/ros_workspace/joe_controller_pkg/srv/CommandVelocity.srv */
#ifndef JOE_CONTROLLER_PKG_SERVICE_COMMANDVELOCITY_H
#define JOE_CONTROLLER_PKG_SERVICE_COMMANDVELOCITY_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace joe_controller_pkg
{
template <class ContainerAllocator>
struct CommandVelocityRequest_ : public ros::Message
{
  typedef CommandVelocityRequest_<ContainerAllocator> Type;

  CommandVelocityRequest_()
  : linear(0.0)
  , angular(0.0)
  {
  }

  CommandVelocityRequest_(const ContainerAllocator& _alloc)
  : linear(0.0)
  , angular(0.0)
  {
  }

  typedef double _linear_type;
  double linear;

  typedef double _angular_type;
  double angular;


private:
  static const char* __s_getDataType_() { return "joe_controller_pkg/CommandVelocityRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "144a16e4d6b53a0dbadc2e617460a173"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "1b4d66b9d9e248212f1f6b29ddb376fa"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
float64 linear\n\
float64 angular\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, linear);
    ros::serialization::serialize(stream, angular);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, linear);
    ros::serialization::deserialize(stream, angular);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(linear);
    size += ros::serialization::serializationLength(angular);
    return size;
  }

  typedef boost::shared_ptr< ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct CommandVelocityRequest
typedef  ::joe_controller_pkg::CommandVelocityRequest_<std::allocator<void> > CommandVelocityRequest;

typedef boost::shared_ptr< ::joe_controller_pkg::CommandVelocityRequest> CommandVelocityRequestPtr;
typedef boost::shared_ptr< ::joe_controller_pkg::CommandVelocityRequest const> CommandVelocityRequestConstPtr;


template <class ContainerAllocator>
struct CommandVelocityResponse_ : public ros::Message
{
  typedef CommandVelocityResponse_<ContainerAllocator> Type;

  CommandVelocityResponse_()
  : rotation_left(0.0)
  , rotation_right(0.0)
  , pivot_angle(0.0)
  {
  }

  CommandVelocityResponse_(const ContainerAllocator& _alloc)
  : rotation_left(0.0)
  , rotation_right(0.0)
  , pivot_angle(0.0)
  {
  }

  typedef double _rotation_left_type;
  double rotation_left;

  typedef double _rotation_right_type;
  double rotation_right;

  typedef double _pivot_angle_type;
  double pivot_angle;


private:
  static const char* __s_getDataType_() { return "joe_controller_pkg/CommandVelocityResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1090bc5cbf123dce7e5cae633c3dc85b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "1b4d66b9d9e248212f1f6b29ddb376fa"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 rotation_left\n\
float64 rotation_right\n\
float64 pivot_angle\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, rotation_left);
    ros::serialization::serialize(stream, rotation_right);
    ros::serialization::serialize(stream, pivot_angle);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, rotation_left);
    ros::serialization::deserialize(stream, rotation_right);
    ros::serialization::deserialize(stream, pivot_angle);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(rotation_left);
    size += ros::serialization::serializationLength(rotation_right);
    size += ros::serialization::serializationLength(pivot_angle);
    return size;
  }

  typedef boost::shared_ptr< ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct CommandVelocityResponse
typedef  ::joe_controller_pkg::CommandVelocityResponse_<std::allocator<void> > CommandVelocityResponse;

typedef boost::shared_ptr< ::joe_controller_pkg::CommandVelocityResponse> CommandVelocityResponsePtr;
typedef boost::shared_ptr< ::joe_controller_pkg::CommandVelocityResponse const> CommandVelocityResponseConstPtr;

struct CommandVelocity
{

typedef CommandVelocityRequest Request;
typedef CommandVelocityResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CommandVelocity
} // namespace joe_controller_pkg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "144a16e4d6b53a0dbadc2e617460a173";
  }

  static const char* value(const  ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x144a16e4d6b53a0dULL;
  static const uint64_t static_value2 = 0xbadc2e617460a173ULL;
};

template<class ContainerAllocator>
struct DataType< ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/CommandVelocityRequest";
  }

  static const char* value(const  ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64 linear\n\
float64 angular\n\
\n\
";
  }

  static const char* value(const  ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1090bc5cbf123dce7e5cae633c3dc85b";
  }

  static const char* value(const  ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1090bc5cbf123dceULL;
  static const uint64_t static_value2 = 0x7e5cae633c3dc85bULL;
};

template<class ContainerAllocator>
struct DataType< ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/CommandVelocityResponse";
  }

  static const char* value(const  ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 rotation_left\n\
float64 rotation_right\n\
float64 pivot_angle\n\
\n\
\n\
";
  }

  static const char* value(const  ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.linear);
    stream.next(m.angular);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CommandVelocityRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rotation_left);
    stream.next(m.rotation_right);
    stream.next(m.pivot_angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CommandVelocityResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<joe_controller_pkg::CommandVelocity> {
  static const char* value() 
  {
    return "1b4d66b9d9e248212f1f6b29ddb376fa";
  }

  static const char* value(const joe_controller_pkg::CommandVelocity&) { return value(); } 
};

template<>
struct DataType<joe_controller_pkg::CommandVelocity> {
  static const char* value() 
  {
    return "joe_controller_pkg/CommandVelocity";
  }

  static const char* value(const joe_controller_pkg::CommandVelocity&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b4d66b9d9e248212f1f6b29ddb376fa";
  }

  static const char* value(const joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/CommandVelocity";
  }

  static const char* value(const joe_controller_pkg::CommandVelocityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b4d66b9d9e248212f1f6b29ddb376fa";
  }

  static const char* value(const joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "joe_controller_pkg/CommandVelocity";
  }

  static const char* value(const joe_controller_pkg::CommandVelocityResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // JOE_CONTROLLER_PKG_SERVICE_COMMANDVELOCITY_H

