//#line 2 "/opt/ros/diamondback/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the MST_Position package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __MST_Position__POSISTION_PARAMSCONFIG_H__
#define __MST_Position__POSISTION_PARAMSCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/config_init_mutex.h>

namespace MST_Position
{
  class Posistion_ParamsConfigStatics;
  
  class Posistion_ParamsConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(Posistion_ParamsConfig &config, const Posistion_ParamsConfig &max, const Posistion_ParamsConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const Posistion_ParamsConfig &config1, const Posistion_ParamsConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, Posistion_ParamsConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const Posistion_ParamsConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Posistion_ParamsConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const Posistion_ParamsConfig &config) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T Posistion_ParamsConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (Posistion_ParamsConfig::* field);

      virtual void clamp(Posistion_ParamsConfig &config, const Posistion_ParamsConfig &max, const Posistion_ParamsConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const Posistion_ParamsConfig &config1, const Posistion_ParamsConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, Posistion_ParamsConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const Posistion_ParamsConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Posistion_ParamsConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const Posistion_ParamsConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }
    };

//#line 14 "./Position_Params.cfg"
      bool use_gpsd;
//#line 15 "./Position_Params.cfg"
      bool go_to_waypoints;
//#line 16 "./Position_Params.cfg"
      bool skip_waypoint;
//#line 17 "./Position_Params.cfg"
      double waypoint_radius;
//#line 18 "./Position_Params.cfg"
      double way_1_latitude;
//#line 19 "./Position_Params.cfg"
      double way_1_longitude;
//#line 20 "./Position_Params.cfg"
      int way_1_priority;
//#line 21 "./Position_Params.cfg"
      double way_2_latitude;
//#line 22 "./Position_Params.cfg"
      double way_2_longitude;
//#line 23 "./Position_Params.cfg"
      int way_2_priority;
//#line 24 "./Position_Params.cfg"
      double way_3_latitude;
//#line 25 "./Position_Params.cfg"
      double way_3_longitude;
//#line 26 "./Position_Params.cfg"
      int way_3_priority;
//#line 27 "./Position_Params.cfg"
      double way_4_latitude;
//#line 28 "./Position_Params.cfg"
      double way_4_longitude;
//#line 29 "./Position_Params.cfg"
      int way_4_priority;
//#line 30 "./Position_Params.cfg"
      double way_5_latitude;
//#line 31 "./Position_Params.cfg"
      double way_5_longitude;
//#line 32 "./Position_Params.cfg"
      int way_5_priority;
//#line 33 "./Position_Params.cfg"
      double way_6_latitude;
//#line 34 "./Position_Params.cfg"
      double way_6_longitude;
//#line 35 "./Position_Params.cfg"
      int way_6_priority;
//#line 36 "./Position_Params.cfg"
      double way_7_latitude;
//#line 37 "./Position_Params.cfg"
      double way_7_longitude;
//#line 38 "./Position_Params.cfg"
      int way_7_priority;
//#line 39 "./Position_Params.cfg"
      double way_8_latitude;
//#line 40 "./Position_Params.cfg"
      double way_8_longitude;
//#line 41 "./Position_Params.cfg"
      int way_8_priority;
//#line 42 "./Position_Params.cfg"
      double way_9_latitude;
//#line 43 "./Position_Params.cfg"
      double way_9_longitude;
//#line 44 "./Position_Params.cfg"
      int way_9_priority;
//#line 45 "./Position_Params.cfg"
      double way_10_latitude;
//#line 46 "./Position_Params.cfg"
      double way_10_longitude;
//#line 47 "./Position_Params.cfg"
      int way_10_priority;
//#line 138 "/opt/ros/diamondback/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;
      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("Posistion_ParamsConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      __toMessage__(msg, __param_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const Posistion_ParamsConfig &__max__ = __getMax__();
      const Posistion_ParamsConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const Posistion_ParamsConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const Posistion_ParamsConfig &__getDefault__();
    static const Posistion_ParamsConfig &__getMax__();
    static const Posistion_ParamsConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    
  private:
    static const Posistion_ParamsConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void Posistion_ParamsConfig::ParamDescription<std::string>::clamp(Posistion_ParamsConfig &config, const Posistion_ParamsConfig &max, const Posistion_ParamsConfig &min) const
  {
    return;
  }

  class Posistion_ParamsConfigStatics
  {
    friend class Posistion_ParamsConfig;
    
    Posistion_ParamsConfigStatics()
    {
//#line 14 "./Position_Params.cfg"
      __min__.use_gpsd = 0;
//#line 14 "./Position_Params.cfg"
      __max__.use_gpsd = 1;
//#line 14 "./Position_Params.cfg"
      __default__.use_gpsd = 0;
//#line 14 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<bool>("use_gpsd", "bool", 1, "bool to use the garmin gps", "", &Posistion_ParamsConfig::use_gpsd)));
//#line 15 "./Position_Params.cfg"
      __min__.go_to_waypoints = 0;
//#line 15 "./Position_Params.cfg"
      __max__.go_to_waypoints = 1;
//#line 15 "./Position_Params.cfg"
      __default__.go_to_waypoints = 0;
//#line 15 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<bool>("go_to_waypoints", "bool", 1, "option to go forward or follow waypoints", "", &Posistion_ParamsConfig::go_to_waypoints)));
//#line 16 "./Position_Params.cfg"
      __min__.skip_waypoint = 0;
//#line 16 "./Position_Params.cfg"
      __max__.skip_waypoint = 1;
//#line 16 "./Position_Params.cfg"
      __default__.skip_waypoint = 0;
//#line 16 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<bool>("skip_waypoint", "bool", 1, "option to skip a waypoint", "", &Posistion_ParamsConfig::skip_waypoint)));
//#line 17 "./Position_Params.cfg"
      __min__.waypoint_radius = 0.0;
//#line 17 "./Position_Params.cfg"
      __max__.waypoint_radius = 10.0;
//#line 17 "./Position_Params.cfg"
      __default__.waypoint_radius = 1.0;
//#line 17 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("waypoint_radius", "double", 1, "radius considerd to reach waypoints", "", &Posistion_ParamsConfig::waypoint_radius)));
//#line 18 "./Position_Params.cfg"
      __min__.way_1_latitude = -90.0;
//#line 18 "./Position_Params.cfg"
      __max__.way_1_latitude = 90.0;
//#line 18 "./Position_Params.cfg"
      __default__.way_1_latitude = 1.0;
//#line 18 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_1_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_1_latitude)));
//#line 19 "./Position_Params.cfg"
      __min__.way_1_longitude = -90.0;
//#line 19 "./Position_Params.cfg"
      __max__.way_1_longitude = 10.0;
//#line 19 "./Position_Params.cfg"
      __default__.way_1_longitude = 1.0;
//#line 19 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_1_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_1_longitude)));
//#line 20 "./Position_Params.cfg"
      __min__.way_1_priority = 0;
//#line 20 "./Position_Params.cfg"
      __max__.way_1_priority = 10;
//#line 20 "./Position_Params.cfg"
      __default__.way_1_priority = 1;
//#line 20 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_1_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_1_priority)));
//#line 21 "./Position_Params.cfg"
      __min__.way_2_latitude = -90.0;
//#line 21 "./Position_Params.cfg"
      __max__.way_2_latitude = 90.0;
//#line 21 "./Position_Params.cfg"
      __default__.way_2_latitude = 1.0;
//#line 21 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_2_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_2_latitude)));
//#line 22 "./Position_Params.cfg"
      __min__.way_2_longitude = -90.0;
//#line 22 "./Position_Params.cfg"
      __max__.way_2_longitude = 10.0;
//#line 22 "./Position_Params.cfg"
      __default__.way_2_longitude = 1.0;
//#line 22 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_2_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_2_longitude)));
//#line 23 "./Position_Params.cfg"
      __min__.way_2_priority = 0;
//#line 23 "./Position_Params.cfg"
      __max__.way_2_priority = 10;
//#line 23 "./Position_Params.cfg"
      __default__.way_2_priority = 1;
//#line 23 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_2_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_2_priority)));
//#line 24 "./Position_Params.cfg"
      __min__.way_3_latitude = -90.0;
//#line 24 "./Position_Params.cfg"
      __max__.way_3_latitude = 90.0;
//#line 24 "./Position_Params.cfg"
      __default__.way_3_latitude = 1.0;
//#line 24 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_3_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_3_latitude)));
//#line 25 "./Position_Params.cfg"
      __min__.way_3_longitude = -90.0;
//#line 25 "./Position_Params.cfg"
      __max__.way_3_longitude = 10.0;
//#line 25 "./Position_Params.cfg"
      __default__.way_3_longitude = 1.0;
//#line 25 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_3_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_3_longitude)));
//#line 26 "./Position_Params.cfg"
      __min__.way_3_priority = 0;
//#line 26 "./Position_Params.cfg"
      __max__.way_3_priority = 10;
//#line 26 "./Position_Params.cfg"
      __default__.way_3_priority = 1;
//#line 26 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_3_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_3_priority)));
//#line 27 "./Position_Params.cfg"
      __min__.way_4_latitude = -90.0;
//#line 27 "./Position_Params.cfg"
      __max__.way_4_latitude = 90.0;
//#line 27 "./Position_Params.cfg"
      __default__.way_4_latitude = 1.0;
//#line 27 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_4_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_4_latitude)));
//#line 28 "./Position_Params.cfg"
      __min__.way_4_longitude = -90.0;
//#line 28 "./Position_Params.cfg"
      __max__.way_4_longitude = 10.0;
//#line 28 "./Position_Params.cfg"
      __default__.way_4_longitude = 1.0;
//#line 28 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_4_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_4_longitude)));
//#line 29 "./Position_Params.cfg"
      __min__.way_4_priority = 0;
//#line 29 "./Position_Params.cfg"
      __max__.way_4_priority = 10;
//#line 29 "./Position_Params.cfg"
      __default__.way_4_priority = 1;
//#line 29 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_4_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_4_priority)));
//#line 30 "./Position_Params.cfg"
      __min__.way_5_latitude = -90.0;
//#line 30 "./Position_Params.cfg"
      __max__.way_5_latitude = 90.0;
//#line 30 "./Position_Params.cfg"
      __default__.way_5_latitude = 1.0;
//#line 30 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_5_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_5_latitude)));
//#line 31 "./Position_Params.cfg"
      __min__.way_5_longitude = -90.0;
//#line 31 "./Position_Params.cfg"
      __max__.way_5_longitude = 10.0;
//#line 31 "./Position_Params.cfg"
      __default__.way_5_longitude = 1.0;
//#line 31 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_5_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_5_longitude)));
//#line 32 "./Position_Params.cfg"
      __min__.way_5_priority = 0;
//#line 32 "./Position_Params.cfg"
      __max__.way_5_priority = 10;
//#line 32 "./Position_Params.cfg"
      __default__.way_5_priority = 1;
//#line 32 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_5_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_5_priority)));
//#line 33 "./Position_Params.cfg"
      __min__.way_6_latitude = -90.0;
//#line 33 "./Position_Params.cfg"
      __max__.way_6_latitude = 90.0;
//#line 33 "./Position_Params.cfg"
      __default__.way_6_latitude = 1.0;
//#line 33 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_6_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_6_latitude)));
//#line 34 "./Position_Params.cfg"
      __min__.way_6_longitude = -90.0;
//#line 34 "./Position_Params.cfg"
      __max__.way_6_longitude = 10.0;
//#line 34 "./Position_Params.cfg"
      __default__.way_6_longitude = 1.0;
//#line 34 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_6_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_6_longitude)));
//#line 35 "./Position_Params.cfg"
      __min__.way_6_priority = 0;
//#line 35 "./Position_Params.cfg"
      __max__.way_6_priority = 10;
//#line 35 "./Position_Params.cfg"
      __default__.way_6_priority = 1;
//#line 35 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_6_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_6_priority)));
//#line 36 "./Position_Params.cfg"
      __min__.way_7_latitude = -90.0;
//#line 36 "./Position_Params.cfg"
      __max__.way_7_latitude = 90.0;
//#line 36 "./Position_Params.cfg"
      __default__.way_7_latitude = 1.0;
//#line 36 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_7_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_7_latitude)));
//#line 37 "./Position_Params.cfg"
      __min__.way_7_longitude = -90.0;
//#line 37 "./Position_Params.cfg"
      __max__.way_7_longitude = 10.0;
//#line 37 "./Position_Params.cfg"
      __default__.way_7_longitude = 1.0;
//#line 37 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_7_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_7_longitude)));
//#line 38 "./Position_Params.cfg"
      __min__.way_7_priority = 0;
//#line 38 "./Position_Params.cfg"
      __max__.way_7_priority = 10;
//#line 38 "./Position_Params.cfg"
      __default__.way_7_priority = 1;
//#line 38 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_7_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_7_priority)));
//#line 39 "./Position_Params.cfg"
      __min__.way_8_latitude = -90.0;
//#line 39 "./Position_Params.cfg"
      __max__.way_8_latitude = 90.0;
//#line 39 "./Position_Params.cfg"
      __default__.way_8_latitude = 1.0;
//#line 39 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_8_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_8_latitude)));
//#line 40 "./Position_Params.cfg"
      __min__.way_8_longitude = -90.0;
//#line 40 "./Position_Params.cfg"
      __max__.way_8_longitude = 10.0;
//#line 40 "./Position_Params.cfg"
      __default__.way_8_longitude = 1.0;
//#line 40 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_8_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_8_longitude)));
//#line 41 "./Position_Params.cfg"
      __min__.way_8_priority = 0;
//#line 41 "./Position_Params.cfg"
      __max__.way_8_priority = 10;
//#line 41 "./Position_Params.cfg"
      __default__.way_8_priority = 1;
//#line 41 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_8_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_8_priority)));
//#line 42 "./Position_Params.cfg"
      __min__.way_9_latitude = -90.0;
//#line 42 "./Position_Params.cfg"
      __max__.way_9_latitude = 90.0;
//#line 42 "./Position_Params.cfg"
      __default__.way_9_latitude = 1.0;
//#line 42 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_9_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_9_latitude)));
//#line 43 "./Position_Params.cfg"
      __min__.way_9_longitude = -90.0;
//#line 43 "./Position_Params.cfg"
      __max__.way_9_longitude = 10.0;
//#line 43 "./Position_Params.cfg"
      __default__.way_9_longitude = 1.0;
//#line 43 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_9_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_9_longitude)));
//#line 44 "./Position_Params.cfg"
      __min__.way_9_priority = 0;
//#line 44 "./Position_Params.cfg"
      __max__.way_9_priority = 10;
//#line 44 "./Position_Params.cfg"
      __default__.way_9_priority = 1;
//#line 44 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_9_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_9_priority)));
//#line 45 "./Position_Params.cfg"
      __min__.way_10_latitude = -90.0;
//#line 45 "./Position_Params.cfg"
      __max__.way_10_latitude = 90.0;
//#line 45 "./Position_Params.cfg"
      __default__.way_10_latitude = 1.0;
//#line 45 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_10_latitude", "double", 1, "latitude for waypoint", "", &Posistion_ParamsConfig::way_10_latitude)));
//#line 46 "./Position_Params.cfg"
      __min__.way_10_longitude = -90.0;
//#line 46 "./Position_Params.cfg"
      __max__.way_10_longitude = 10.0;
//#line 46 "./Position_Params.cfg"
      __default__.way_10_longitude = 1.0;
//#line 46 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<double>("way_10_longitude", "double", 1, "longitude for waypoint", "", &Posistion_ParamsConfig::way_10_longitude)));
//#line 47 "./Position_Params.cfg"
      __min__.way_10_priority = 0;
//#line 47 "./Position_Params.cfg"
      __max__.way_10_priority = 10;
//#line 47 "./Position_Params.cfg"
      __default__.way_10_priority = 1;
//#line 47 "./Position_Params.cfg"
      __param_descriptions__.push_back(Posistion_ParamsConfig::AbstractParamDescriptionConstPtr(new Posistion_ParamsConfig::ParamDescription<int>("way_10_priority", "int", 1, "priority of waypoint(0 is ignored)", "", &Posistion_ParamsConfig::way_10_priority)));
//#line 239 "/opt/ros/diamondback/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<Posistion_ParamsConfig::AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        __description_message__.parameters.push_back(**i);
      __max__.__toMessage__(__description_message__.max, __param_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__); 
    }
    std::vector<Posistion_ParamsConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    Posistion_ParamsConfig __max__;
    Posistion_ParamsConfig __min__;
    Posistion_ParamsConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;
    static const Posistion_ParamsConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static Posistion_ParamsConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &Posistion_ParamsConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const Posistion_ParamsConfig &Posistion_ParamsConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const Posistion_ParamsConfig &Posistion_ParamsConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const Posistion_ParamsConfig &Posistion_ParamsConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<Posistion_ParamsConfig::AbstractParamDescriptionConstPtr> &Posistion_ParamsConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const Posistion_ParamsConfigStatics *Posistion_ParamsConfig::__get_statics__()
  {
    const static Posistion_ParamsConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = Posistion_ParamsConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __POSISTION_PARAMSRECONFIGURATOR_H__
