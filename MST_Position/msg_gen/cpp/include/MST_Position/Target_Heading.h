/* Auto-generated by genmsg_cpp for file /home/robot/Documents/Jomegatron_IGVC/MST_Position/msg/Target_Heading.msg */
#ifndef MST_POSITION_MESSAGE_TARGET_HEADING_H
#define MST_POSITION_MESSAGE_TARGET_HEADING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace MST_Position
{
template <class ContainerAllocator>
struct Target_Heading_ {
  typedef Target_Heading_<ContainerAllocator> Type;

  Target_Heading_()
  : target_heading(0.0)
  , distance(0.0)
  , waypoint(0)
  , stop_robot(false)
  , done(false)
  {
  }

  Target_Heading_(const ContainerAllocator& _alloc)
  : target_heading(0.0)
  , distance(0.0)
  , waypoint(0)
  , stop_robot(false)
  , done(false)
  {
  }

  typedef double _target_heading_type;
  double target_heading;

  typedef double _distance_type;
  double distance;

  typedef int8_t _waypoint_type;
  int8_t waypoint;

  typedef uint8_t _stop_robot_type;
  uint8_t stop_robot;

  typedef uint8_t _done_type;
  uint8_t done;


private:
  static const char* __s_getDataType_() { return "MST_Position/Target_Heading"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a83a1849d285a5fb13b2a15dc5ba888d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64     target_heading\n\
float64     distance\n\
int8        waypoint\n\
bool        stop_robot\n\
bool        done\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, target_heading);
    ros::serialization::serialize(stream, distance);
    ros::serialization::serialize(stream, waypoint);
    ros::serialization::serialize(stream, stop_robot);
    ros::serialization::serialize(stream, done);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, target_heading);
    ros::serialization::deserialize(stream, distance);
    ros::serialization::deserialize(stream, waypoint);
    ros::serialization::deserialize(stream, stop_robot);
    ros::serialization::deserialize(stream, done);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(target_heading);
    size += ros::serialization::serializationLength(distance);
    size += ros::serialization::serializationLength(waypoint);
    size += ros::serialization::serializationLength(stop_robot);
    size += ros::serialization::serializationLength(done);
    return size;
  }

  typedef boost::shared_ptr< ::MST_Position::Target_Heading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::MST_Position::Target_Heading_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Target_Heading
typedef  ::MST_Position::Target_Heading_<std::allocator<void> > Target_Heading;

typedef boost::shared_ptr< ::MST_Position::Target_Heading> Target_HeadingPtr;
typedef boost::shared_ptr< ::MST_Position::Target_Heading const> Target_HeadingConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::MST_Position::Target_Heading_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::MST_Position::Target_Heading_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace MST_Position

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::MST_Position::Target_Heading_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::MST_Position::Target_Heading_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::MST_Position::Target_Heading_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a83a1849d285a5fb13b2a15dc5ba888d";
  }

  static const char* value(const  ::MST_Position::Target_Heading_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa83a1849d285a5fbULL;
  static const uint64_t static_value2 = 0x13b2a15dc5ba888dULL;
};

template<class ContainerAllocator>
struct DataType< ::MST_Position::Target_Heading_<ContainerAllocator> > {
  static const char* value() 
  {
    return "MST_Position/Target_Heading";
  }

  static const char* value(const  ::MST_Position::Target_Heading_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::MST_Position::Target_Heading_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64     target_heading\n\
float64     distance\n\
int8        waypoint\n\
bool        stop_robot\n\
bool        done\n\
\n\
";
  }

  static const char* value(const  ::MST_Position::Target_Heading_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::MST_Position::Target_Heading_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::MST_Position::Target_Heading_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.target_heading);
    stream.next(m.distance);
    stream.next(m.waypoint);
    stream.next(m.stop_robot);
    stream.next(m.done);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Target_Heading_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::MST_Position::Target_Heading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::MST_Position::Target_Heading_<ContainerAllocator> & v) 
  {
    s << indent << "target_heading: ";
    Printer<double>::stream(s, indent + "  ", v.target_heading);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "waypoint: ";
    Printer<int8_t>::stream(s, indent + "  ", v.waypoint);
    s << indent << "stop_robot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_robot);
    s << indent << "done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.done);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MST_POSITION_MESSAGE_TARGET_HEADING_H

